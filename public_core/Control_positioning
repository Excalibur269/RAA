本代码主要开放RAA系统对屏幕显示数据控件定位原理,共享使用
namespace Core
{
    public class GetGamsIntPtr
    {
        private Hashtable processWnd = null;

        public delegate bool WNDENUMPROC(IntPtr hwnd, uint lParam);

        public GetGamsIntPtr()
        {
            if (processWnd == null)
            {
                processWnd = new Hashtable();
            }
        }
        public IntPtr GetCurrentWindowHandle()
        {
            IntPtr ptrWnd = IntPtr.Zero;
            Process[] localByName = Process.GetProcessesByName("WorldOfWarships");
            // 当前进程 ID
            if (localByName.Length > 0)  //是否获取到进程
            {
                uint uiPid = (uint)localByName[0].Id; //获取进程PID
                object objWnd = processWnd[uiPid];
                if (objWnd != null)
                {
                    ptrWnd = (IntPtr)objWnd;
                    if (ptrWnd != IntPtr.Zero && NativeMethods.IsWindow(ptrWnd))  // 从缓存中获取句柄
                    {
                        return ptrWnd;
                    }
                    else
                    {
                        ptrWnd = IntPtr.Zero;
                    }
                }
                bool bResult = NativeMethods.EnumWindows(new WNDENUMPROC(EnumWindowsProc), uiPid);
                // 枚举窗口返回 false 并且没有错误号时表明获取成功
                if (!bResult && Marshal.GetLastWin32Error() == 0)
                {
                    objWnd = processWnd[uiPid];
                    if (objWnd != null)
                    {
                        ptrWnd = (IntPtr)objWnd;
                    }
                }

                return ptrWnd;
            }
            else
            {
                return IntPtr.Zero;
            }

        }

        private bool EnumWindowsProc(IntPtr hwnd, uint lParam)
        {
            uint uiPid = 0;
            if (NativeMethods.GetParent(hwnd) == IntPtr.Zero)
            {
                NativeMethods.GetWindowThreadProcessId(hwnd, ref uiPid);
                if (uiPid == lParam)    // 找到进程对应的主窗口句柄
                {
                    processWnd[uiPid] = hwnd;   // 把句柄缓存起来
                    NativeMethods.SetLastError(0);    // 设置无错误
                    return false;   // 返回 false 以终止枚举窗口
                }
            }

            return true;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int Left;                 //最左坐标
            public int Top;                          //最上坐标
            public int Right;                         //最右坐标
            public int Bottom;                    //最下坐标
        }

        public class RC
        {
            public int wd { get; set; }
            public int he { get; set; }
            public int xc { get; set; }
            public int yc { get; set; }
        }
        public RC GetWH()
        {
            IntPtr awin = GetCurrentWindowHandle();
            if (awin.ToString() != "0")
            {
                RECT rect = new RECT();
                NativeMethods.GetWindowRect(awin, ref rect);
                RC UD = new RC();
                UD.wd = rect.Right - rect.Left;                        //窗口的宽度
                UD.he = rect.Bottom - rect.Top;                   //窗口的高度
                UD.xc = rect.Left;
                UD.yc = rect.Top;
                return UD;
            }
            return null;
        }
    }
}
