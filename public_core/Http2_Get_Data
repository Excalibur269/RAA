本代码主要用户Http2获取数据.本代码为死循环获取.
namespace Core.Tactical_Analysis
{
    //本类属于采用.Net4.6的Http2的快速获取数据的方法.Http2必须采用https的网站.且网站必须支持http2才行
    //然兼容http1.1
    public class Http2_Get_Data
    {
        /// <summary>
        /// /获取数据操作
        /// </summary>
        /// <param name="data_url">获取数据url</param>
       public async Task<string> Http2_Get_All_Data(Uri data_url, string parameter)
        {
            var client = new HttpClient(new Http2CustomHandler());
            HttpResponseMessage response = new HttpResponseMessage();
            string data = null;
            try
            {
                client.BaseAddress = data_url;
                //判断URi的参数是否为空.分别因对两种情况.一种是完整的Url地址.无需参数获取数据
                //第二种是通过地址.参数获取
                if (!string.IsNullOrEmpty(parameter))
                {
                    response = await client.GetAsync(parameter);
                }
                else
                {
                    response = await client.GetAsync("");
                }

                if (response.IsSuccessStatusCode)
                {
                    MemoryStream buffer = new MemoryStream();
                    await response.Content.CopyToAsync(buffer);
                    buffer.Position = 0;
                    StreamReader sr = new StreamReader(buffer);
                    data = sr.ReadToEnd();
                    response.Dispose();
                    sr.Close();
                }
                _get_data_stats=true;
                return data;
            }
            catch
            {              
                return data;
            }
        }
        /// <summary>
        /// 循环获取数据.直到返回data不为null或者不为null字符串为止!
        /// 死循环.概不负责
        /// </summary>
        static bool _get_data_stats=false;
        public async Task<string> Http2_GetData_Void(Uri data_url, string parameter)
        {
            _get_data_stats = false;
            while (_get_data_stats==false)
            {                
                string data = await Http2_Get_All_Data(data_url, parameter);
                if (!string.IsNullOrEmpty(data) & data!="null")
                {
                    return data;
                }
                Thread.Sleep(3000);
            }
            return null;
        }


        public class Http2CustomHandler : WinHttpHandler
        {
            protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
            {
                request.Version = new System.Version("2.0");
                return base.SendAsync(request, cancellationToken);
            }
        }
    }

}
